<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephen&#39;s Blog on Stephen&#39;s Blog</title>
    <link>https://keyganker.github.io/</link>
    <description>Recent content in Stephen&#39;s Blog on Stephen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Mar 2018 23:17:15 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Redis过期策略</title>
      <link>https://keyganker.github.io/post/redis-expired/</link>
      <pubDate>Sat, 03 Mar 2018 23:17:15 +0800</pubDate>
      
      <guid>https://keyganker.github.io/post/redis-expired/</guid>
      <description> Redis和Memached是目前最流行的in-memory DB，它丰富的功能为广大程序员所爱，而可以为数据设置过期时间（Expired time）是应用最多的特性之一。本篇博客来回顾一下redis的数据Expired策略；
与过期有关的几个命令 与Expired相关的命令有以下几个：
命令 | 含义
EXPIRE | 为某个key设置过期时间，单位秒
PEXIRE | 为每个key设置过期时间，单位毫秒（2.6之后支持
EXPIREAT | 为某个key指定未来的某个时间点过期，精度到秒
EXPIREAT | 为某个key指定未来的某个时间点过期，精度到毫秒
PERSIST | 将某个key上的过期时间删除
另外还有1个命令也会影响到key上的过期时间：
 RENAME RENAME用来把keyA重命名为keyB，如果已经存在keyB，则覆盖keyB；这里注意，重命名后的keyB会继承keyA的所有特性。例如：原来存在没有过期时间的keyB，从命名带过期时间的keyA为keyB后，除了keyB的value会被覆盖，并且keyB也会带上keyA的过期时间。  还有几个规则需要注意：
 如果给某个key设置一个过去的过期时间，那么这个key会被立刻执行delete操作，而不是expired；这里有个细节，在redis内部delete和expired是不等价的，二者对应不同的event，expired的数据并不一定被delete了，下面了解了redis expired策略后会更清晰 所有执行删除（delete）key、覆盖（overwrite）key的value操作的命令会清除掉key上的过期时间（注意RENAME不在此规则中，RENAME是继承原来key的属性，可能是清除，也可能是添加）；如：DEL、SET、GETSET以及所有*STORE命令。 同样的，改变（alter）key的value不会清除key上的过期时间，例如：INCR、LPUSH、HSET。  Redis的过期实现 这里不谈源码，根据官方文档说明，无论你用的是上面提到的哪个命令为key设置过期时间，redis内部都是通过为key设置一个绝对的unix时间戳来实现有效期的。这也就意味着，为key设置完时间戳之后，即使把redis实例关掉，key的有效时间依然在流逝，等过了有效时间再次启动redis实例后key也依然已经过期了。
由此也可以得出，redis key的过期实现严重依赖服务器的时钟，一旦时钟紊乱，则会造成意想不到的结果。例如为key设置1000s的有效时间，然后把时钟调快500s，那么key的有效时间就只剩下 500s了。
过期策略 那么有效期到了之后，redis是如何执行过期操作的呢？
主要有两种策略：被动策略和主动策略
被动策略 当key被访问的时候，如果key已经过期，则会执行删除操作，客户端返回key不存在
主动策略 周期性的执行以下操作：
 从所有有过期时间的key中随机去20个 删除这20个key中所有已过期的key 如果第2步中有超过25%的key被删除了，则直接进入下一个循环周期  主动策略的目的是把已经过期的key数量控制在所有带过期时间的key总数的25%以下，这是对被动策略的一个有效补充，试想如果只有被动策略，那么如果有些key过期之后再也没有被访问，岂不是会一直不被删除从而白白占用内存。
过期和复制 为了服务的的高可用，redis支持复制功能，即slave会持续不断的同步master的状态；那么redis中key的expired状态是如何同步的呢？
首先，redis slave和master之间的同步分为两种：全量同步和增量同步；而增量同步的实现就是把master上执行的所有命令一条条发到slave重放一遍；但是key的expired并没有命令触发，而redis为了保证master和slave之间数据的一致性，会在上一节中提到的过期策略中，key的expired被触发执行delete操作的同时，生成一条DEL命令发到slave上，从而保证slave上的过期数据也被删除。
但是这里有一个坑：如果master上的key已经过期，但是由于主从之间的不同步，会存在slave上的key可能还没删除，这个时候会发生神奇的现象：从master上get key返回不存在，从slave上get key却返回了值！ 不过在redis3.2的版本中，作者修复了这个问题，即在slave上，访问某个key的时候，redis会根据本地的时钟来检查这个key时候已经过期，如果过期则不会返回它的值。
参考资料  https://redis.io/commands/expire https://engineering.grab.com/a-key-expired-in-redis-you-wont-believe-what-happened-next https://github.com/antirez/redis/issues/1768  </description>
    </item>
    
    <item>
      <title>php预防sql注入之PDO</title>
      <link>https://keyganker.github.io/post/php%E9%A2%84%E9%98%B2sql%E6%B3%A8%E5%85%A5%E4%B9%8Bpdo/</link>
      <pubDate>Sun, 16 Nov 2014 16:09:35 +0800</pubDate>
      
      <guid>https://keyganker.github.io/post/php%E9%A2%84%E9%98%B2sql%E6%B3%A8%E5%85%A5%E4%B9%8Bpdo/</guid>
      <description>SQL注入这个话题是老生常谈了，然而却依然不可忽视，尤其对于PHP这种“最接近用户”的语言来说，就显得尤为重要！
现在我接触的一个项目使用了PHPCMS，而PHPCMS是使用mysqli的方式来连接数据库的，数据库操作的底层封装代码中对SQL注入的防范几乎没有（就是在字段两遍加反引号，在字段值两遍加引号），这样的框架使用起来让人感觉毫无安全感！那对于PHP来说如何做到防止SQL注入呢？方法很多种，最安全的当然是使用官方推荐的操作数据库的方式，那就是使用 PDO！
PDO的好处 PDO不仅仅可以防止SQL注入，而且可以对SQL语句进行预编译，从而达到提高效率的地步，这里我们focus在防注入的处理上。
首先我们要知道PDO是如何防注入的？这里先介绍一下PDO中的一个参数：
PDO::ATTR_EMULATE_PREPARES Enables or disables emulation of prepared statements. Some drivers do not support native prepared statements or have limited support for them. Use this setting to force PDO to either always emulate prepared statements (if TRUE), or to try to use native prepared statements (if FALSE). It will always fall back to emulating the prepared statement if the driver cannot successfully prepare the current query</description>
    </item>
    
    <item>
      <title>密钥格式</title>
      <link>https://keyganker.github.io/post/encry_decry/</link>
      <pubDate>Sun, 16 Nov 2014 16:09:35 +0800</pubDate>
      
      <guid>https://keyganker.github.io/post/encry_decry/</guid>
      <description>从ssh说起 现代各种通信计算的安全依赖各种加密算法，最著名的莫过于RSA加密算法，它被广泛应用于各种通信技术，如：ssl／tsl，ssh等 在实际工作当中，我们应用RSA加密技术最多的地方莫过于ssh, 比如github；大家都知道使用ssh首先要通过ssh-keygen生成一对密钥，常用的命令如下：
ssh-keygen -t rsa -C &amp;quot;$(whoami)@$(hostname)-$(date -I)&amp;quot;
这个命令就是生成基于rsa加密算法的一对密钥，这个时候把公钥放到github上，就可以基于ssh协议clone代码了。
说到这里我们提到了两个概念：协议 和 加密算法，协议规定如何通信以及使用什么类型的加密技术，比如这里使用的是非对称加密算法，而具体采用哪种加密非对称加密算法则要看实现如何支持了。 还是拿ssh举例，其实openssh目前支持的密钥生成算法不止rsa，还有dsa和ecdsa（椭圆曲线数字签名算法），甚至它目前推荐的密钥生成算法都不是rsa，而是ecdsa，具体它是如何实现以及和rsa有什么区别不是本文讨论的范畴，我们只需要知道它也是一种非对称加密算法就可以了，而且基于ecdsa算法生成的密钥更小，安全度更高。
注：在GNOME中，由于这个bug的原因导致Gnome Keyring无法支持ecdsa，但是已经在这个patch中修复了（居然从发现到修复隔了6年半，这是有多不重视ecdsa啊，不过由此也可见rsa的统治地位。。。）
好了，回到开始生成密钥的地方，这里生成的一对密钥文件名通常为id_rsa和id_rsa.pub，前者为私钥，后者为公钥； 到这里不知道大家有没有想过，这对密钥我们可以在程序中用来加解密、解密数据吗？比如使用php的openssl系列函数，或者java的Cipher类？
答案是不能。
你可能会想，这不是生成的rsa密钥吗？为什么不能用来加、解密数据？先不着急，我们先看看这两个密钥有什么特点。
首先打开这两个文件，细心的你会发现，两个文件的格式有很大不同，私钥会有一对header和footer：
-----BEGIN RSA PRIVATE KEY----- BASE64 ENCODED DATA -----END RSA PRIVATE KEY-----  而公钥却没有，并且是以ssh-rsa开头的，这和我们通常认知中的有点不同，通常我们看到的私钥和公钥不是都应该有一对header/footer吗？这里ssh-keygen生成的为什么是这样的？
你猜对了，这里的公钥是ssh专用的一种密钥格式，它不与其他格式如pkcs系列兼容；而私钥使用的格式则是pkcs#1，是我们经常使用一种密钥格式之一。 那是不是ssh-keygen生成的密钥就不能用于openssl系列函数？
答案是否定的，我们可以通过以下命令将ssh专用的公钥格式转换为其他格式，如：pkcs#1 或 pkcs#8:
ssh-keygen -f id_rsa.pub -e -m pem
或
ssh-keygen -f id_rsa.pub -e -m pkcs8
转换之后，我们就可以用原来的私钥和转换后的公钥加解密数据了。
密钥和格式 刚才提到了密钥格式，那么密钥格式都有哪些呢？常用的是哪几种呢？比如apache、nginx支持的是什么格式，php、java通常使用的是哪种格式？</description>
    </item>
    
  </channel>
</rss>
